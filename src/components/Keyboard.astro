---
import { basics } from "@cv";
const { profiles } = basics;

const SOCIAL_ICONS: Record<string, string> = {
  GitHub: `
    <svg
    style="margin-right: 8px"
  width="16"
  height="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  ><path
    fill="currentColor"
    d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"
  ></path></svg
>`,
  LinkedIn: `<svg
  style="margin-right: 8px"
  height="16"
  width="16"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  ><title>LinkedIn</title><path
    fill="currentColor"
    d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
  ></path></svg
>
`,
};

const profilesInfo = profiles.map(({ network, url }) => {
  const icon = SOCIAL_ICONS[network];
  const firstLetter = network[0].toUpperCase();
  return {
    id: network,
    hotkey: `ctrl+${firstLetter}`,
    section: "Social",
    title: `Visitar ${network}`,
    icon,
    url,
  };
});
---


<footer
  class="animate-fadeIn scroll-smooth hidden print:hidden text-xs bg-[#fdfdfd] border border-[#eee] sm:block fixed bottom-0 w-full py-1 px-4 text-center"
>
  Pulsa <kbd class="bg-[#eee] rounded py-[2px] px-1 text-xs">Ctrl</kbd> + <kbd
    class="bg-[#eee] rounded py-[2px] px-1 text-xs">K</kbd
  > para abrir la paleta de comandos.
</footer>

<ninja-keys
  openHotkey="ctrl+K"
  data-info={JSON.stringify(profilesInfo)}
  placeholder="Buscar Comando"
  hideBreadcrumbs
>
</ninja-keys>

<script>
  import "ninja-keys";

  const ninja = document.querySelector("ninja-keys");

  if (ninja !== null) {
    const info = ninja.getAttribute("data-info") ?? "[]";
    const parsedInfo = JSON.parse(info);

    const data = parsedInfo.map((item: any) => {
      return {
        ...item,
        handler: () => {
          window.open(item.url, "_blank");
        },
      };
    });

    ninja.data = [
      {
        id: "print",
        title: "Imprimir",
        hotkey: "ctrl+P",
        icon: "🖨️ ",
        section: "Acciones",
        handler: () => {
          window.print();
        },
      },
      {
        id: "Tema",
        title: "Cambia el Tema",
        icon: "🪟 ",
        children: ["Light Mode", "Dark Mode"],
        hotkey: "ctrl+T",
        section: "Acciones",
        handler: () => {
          // open menu if closed. Because you can open directly that menu from it's hotkey
          ninja.open({ parent: "Theme" });
          // if menu opened that prevent it from closing on select that action, no need if you don't have child actions
          return { keepOpen: true };
        },
      },
      {
        id: "Light Mode",
        title: "Light Mode",
        icon: "☀️ ",
        parent: "Theme",
        handler: () => {
          // simple handler
          document.querySelector("ninja-keys")?.classList.remove("dark");
          document.documentElement.classList.remove("dark");
        },
      },
      {
        id: "Dark Mode",
        title: "Dark Mode",
        icon: "🌑 ",
        parent: "Theme",
        handler: () => {
          // simple handler
          document.querySelector("ninja-keys")?.classList.add("dark");
          document.documentElement.classList.add("dark");
        },
      },
      ...data,
    ];
  }
</script>

<style>
  @media print {
    ninja-keys {
      display: none;
    }
  }

  @media (max-width: 640px) {
    ninja-keys {
      --ninja-width: 300px;
    }
  }

  footer {
    view-timeline-name: --revealing;
    view-timeline-axis: block;
    animation-timeline: --revealing;
    animation-range: entry 100% cover 10%;
  }
</style>